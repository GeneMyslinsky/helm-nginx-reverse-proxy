#-> Attacker looking to get in via load balancer url directly
server {
    listen 443 ssl default_server;
    server_name _;
    ssl_certificate         tls/nginx.crt;
    ssl_certificate_key     tls/nginx.key;
    # ssl_dhparam             tls/dhparam.pem;
    ssl_protocols TLSv1.2;
    client_body_buffer_size 32k;
    ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4";
    ssl_prefer_server_ciphers on;
    keepalive_timeout    600;

    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 10m;
    access_log /var/log/nginx/bad_request.access.log;
    error_log /var/log/nginx/bad_request.error.log error;

    return 444;
}

#-> Attacker looking to get in via load balancer url directly
server {
    server_name _;
    listen       80  default_server;
    return       444;
    access_log /var/log/nginx/bad_request.access.log;
    error_log /var/log/nginx/bad_request.error.log error;
}

#-> Upgrade Rule
server {
    server_name *.myslinsky.com;
    listen 80;
    location / {
        return 301 https://$host$request_uri;
    }
}


#-> simple http1 proxy
server {
    server_name ~^(.+)\.myslinsky\.com$;
    listen 443 ssl;
    resolver kube-dns.kube-system.svc.cluster.local valid=5s;
    client_body_buffer_size 32k;
    if ($host ~* ^(.+)\.myslinsky\.com$) {
        set $namespace $1;
    }
    }    
    location / {
        proxy_http_version  1.1;
        proxy_pass          https://nginx.$namespace.svc.cluster.local;
        proxy_read_timeout 900;
        proxy_connect_timeout 900;
        proxy_send_timeout 900;
        proxy_set_header    Host $host;
        add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";
        add_header Cache-Control no-cache;
    }
    
}



